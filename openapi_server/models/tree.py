from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Tree(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, lat=None, lng=None, type=None, lidar_url=None):  # noqa: E501
        """Tree - a model defined in OpenAPI

        :param id: The id of this Tree.  # noqa: E501
        :type id: int
        :param lat: The lat of this Tree.  # noqa: E501
        :type lat: float
        :param lng: The lng of this Tree.  # noqa: E501
        :type lng: float
        :param type: The type of this Tree.  # noqa: E501
        :type type: str
        :param lidar_url: The lidar_url of this Tree.  # noqa: E501
        :type lidar_url: str
        """
        self.openapi_types = {
            'id': int,
            'lat': float,
            'lng': float,
            'type': str,
            'lidar_url': str
        }

        self.attribute_map = {
            'id': 'id',
            'lat': 'lat',
            'lng': 'lng',
            'type': 'type',
            'lidar_url': 'lidar_url'
        }

        self._id = id
        self._lat = lat
        self._lng = lng
        self._type = type
        self._lidar_url = lidar_url

    @classmethod
    def from_dict(cls, dikt) -> 'Tree':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tree of this Tree.  # noqa: E501
        :rtype: Tree
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Tree.


        :return: The id of this Tree.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Tree.


        :param id: The id of this Tree.
        :type id: int
        """

        self._id = id

    @property
    def lat(self) -> float:
        """Gets the lat of this Tree.


        :return: The lat of this Tree.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this Tree.


        :param lat: The lat of this Tree.
        :type lat: float
        """

        self._lat = lat

    @property
    def lng(self) -> float:
        """Gets the lng of this Tree.


        :return: The lng of this Tree.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng: float):
        """Sets the lng of this Tree.


        :param lng: The lng of this Tree.
        :type lng: float
        """

        self._lng = lng

    @property
    def type(self) -> str:
        """Gets the type of this Tree.


        :return: The type of this Tree.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Tree.


        :param type: The type of this Tree.
        :type type: str
        """

        self._type = type

    @property
    def lidar_url(self) -> str:
        """Gets the lidar_url of this Tree.


        :return: The lidar_url of this Tree.
        :rtype: str
        """
        return self._lidar_url

    @lidar_url.setter
    def lidar_url(self, lidar_url: str):
        """Sets the lidar_url of this Tree.


        :param lidar_url: The lidar_url of this Tree.
        :type lidar_url: str
        """

        self._lidar_url = lidar_url
