openapi: 3.0.3
info:
  title: Tree Management API
  version: 1.0.0
  description: >
    Flask backend for tree registration, LiDAR file management (server-side upload),
    and work log (作業日誌) recording.
servers:
  - url: /api/v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: openapi_server.controllers.default_controller.decode_token
  schemas:
    UserRegister:
      type: object
      properties:
        username: { type: string }
        password: { type: string }
      required: [username, password]
    UserLogin:
      type: object
      properties:
        username: { type: string }
        password: { type: string }
      required: [username, password]
    TokenResponse:
      type: object
      properties:
        access_token: { type: string }
    Tree:
      type: object
      properties:
        id: { type: integer }
        lat: { type: number, format: float }
        lng: { type: number, format: float }
        type: { type: string }
        lidar_url: { type: string, nullable: true }
    WorkLog:
      type: object
      properties:
        id: { type: integer }
        date: { type: string, format: date }
        description: { type: string }
paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: openapi_server.controllers.default_controller.auth_register_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: User created
  /auth/login:
    post:
      summary: Login user and get JWT
      operationId: openapi_server.controllers.default_controller.auth_login_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /trees:
    get:
      summary: List all trees
      operationId: openapi_server.controllers.default_controller.trees_get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of trees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tree'
    post:
      summary: Create a new tree
      operationId: openapi_server.controllers.default_controller.trees_post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lat: { type: number }
                lng: { type: number }
                type: { type: string }
      responses:
        '200':
          description: Created tree
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tree'
  /trees/{tree_id}:
    get:
      summary: Get tree details
      operationId: openapi_server.controllers.default_controller.trees_tree_id_get
      security:
        - bearerAuth: []
      parameters:
        - { in: path, name: tree_id, required: true, schema: { type: integer } }
      responses:
        '200':
          description: Tree details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tree'
  /trees/{tree_id}/lidar:
    post:
      summary: Upload LiDAR file for a tree
      operationId: openapi_server.controllers.default_controller.trees_tree_id_lidar_post
      security:
        - bearerAuth: []
      parameters:
        - { in: path, name: tree_id, required: true, schema: { type: integer } }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
      responses:
        '201':
          description: LiDAR file uploaded
    head:
      summary: Get LiDAR file metadata
      operationId: openapi_server.controllers.default_controller.trees_tree_id_lidar_head
      security:
        - bearerAuth: []
      parameters:
        - { in: path, name: tree_id, required: true, schema: { type: integer } }
      responses:
        '200':
          description: LiDAR file metadata
    delete:
      summary: Delete LiDAR file
      operationId: openapi_server.controllers.default_controller.trees_tree_id_lidar_delete
      security:
        - bearerAuth: []
      parameters:
        - { in: path, name: tree_id, required: true, schema: { type: integer } }
      responses:
        '200':
          description: LiDAR deleted
  /trees/{tree_id}/worklogs:
    get:
      summary: List work logs for a tree
      operationId: openapi_server.controllers.default_controller.trees_tree_id_worklogs_get
      security:
        - bearerAuth: []
      parameters:
        - { in: path, name: tree_id, required: true, schema: { type: integer } }
      responses:
        '200':
          description: Work logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkLog'
    post:
      summary: Add a new work log
      operationId: openapi_server.controllers.default_controller.trees_tree_id_worklogs_post
      security:
        - bearerAuth: []
      parameters:
        - { in: path, name: tree_id, required: true, schema: { type: integer } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date: { type: string, format: date }
                description: { type: string }
      responses:
        '201':
          description: Work log created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLog'
  /trees/{tree_id}/worklogs/{worklog_id}:
    get:
      summary: Get work log details
      operationId: openapi_server.controllers.default_controller.trees_tree_id_worklogs_worklog_id_get
      security:
        - bearerAuth: []
      parameters:
        - { in: path, name: tree_id, required: true, schema: { type: integer } }
        - { in: path, name: worklog_id, required: true, schema: { type: integer } }
      responses:
        '200':
          description: Work log detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLog'